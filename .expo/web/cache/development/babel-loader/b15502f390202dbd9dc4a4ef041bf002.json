{"ast":null,"code":"import React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Input from \"./../shared/Input\";\nimport CustomButton from \"./../shared/Button\";\nimport Colors from \"../../constants/Color\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Formik } from \"formik\";\nimport loginValidationSchema from \"../../validationSchema/Login\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { signInOrUp } from \"./../../store/actions/Authenticate\";\nimport { ErrorMessage } from \"../shared/ErrorModal\";\n\nvar Login = function Login(props) {\n  var dispatch = useDispatch();\n  var loading = useSelector(function (state) {\n    return state.auth.loading;\n  });\n  return React.createElement(Formik, {\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    validationSchema: loginValidationSchema,\n    onSubmit: function onSubmit(values) {\n      dispatch(signInOrUp(values, \"login\"));\n    }\n  }, function (_ref) {\n    var handleChange = _ref.handleChange,\n        handleBlur = _ref.handleBlur,\n        handleSubmit = _ref.handleSubmit,\n        values = _ref.values,\n        errors = _ref.errors;\n    return React.createElement(View, {\n      style: styles.contaier\n    }, React.createElement(Input, {\n      name: \"email\",\n      holder: \"Enter  email\",\n      onChangeText: handleChange(\"email\"),\n      onBlur: handleBlur(\"email\"),\n      value: values.email,\n      keyboardType: \"email-address\",\n      error: errors.email,\n      autoComplete: \"email\"\n    }), errors.email && React.createElement(ErrorMessage, {\n      error: errors.email\n    }), React.createElement(Input, {\n      name: \"password\",\n      holder: \"Enter password\",\n      onChangeText: handleChange(\"password\"),\n      onBlur: handleBlur(\"password\"),\n      value: values.password,\n      secureTextEntry: true,\n      error: errors.password\n    }), errors.password && React.createElement(ErrorMessage, {\n      error: errors.password\n    }), React.createElement(Text, {\n      style: styles.forget,\n      onPress: function onPress() {\n        props.data.navigation.navigate(\"Forgot\");\n      }\n    }, \"Forgot password\"), loading ? React.createElement(ActivityIndicator, {\n      color: \"red\",\n      size: \"large\"\n    }) : React.createElement(CustomButton, {\n      style: {\n        marginVertical: 30,\n        marginBottom: 50\n      },\n      touchWidth: \"80%\",\n      onPress: handleSubmit\n    }, \"Login\"));\n  });\n};\n\nexport default Login;\nvar styles = StyleSheet.create({\n  contaier: {\n    marginTop: 50,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    width: \"100%\"\n  },\n  forget: {\n    width: \"75%\",\n    color: Colors.blue,\n    textAlign: \"left\",\n    fontSize: 18,\n    marginBottom: 10\n  }\n});","map":{"version":3,"sources":["C:/Users/lenovo/OneDrive/Desktop/MobileQuiz-UI/components/SignComponents/Login.js"],"names":["React","Input","CustomButton","Colors","useDispatch","useSelector","Formik","loginValidationSchema","signInOrUp","ErrorMessage","Login","props","dispatch","loading","state","auth","email","password","values","handleChange","handleBlur","handleSubmit","errors","styles","contaier","forget","data","navigation","navigate","marginVertical","marginBottom","StyleSheet","create","marginTop","alignItems","justifyContent","width","color","blue","textAlign","fontSize"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { StyleSheet, Text, View } from \"react-native\";\r\nimport Input from \"./../shared/Input\";\r\nimport CustomButton from \"./../shared/Button\";\r\nimport Colors from \"../../constants/Color\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { Formik } from \"formik\";\r\nimport loginValidationSchema from \"../../validationSchema/Login\";\r\nimport { ActivityIndicator } from \"react-native\";\r\nimport { signInOrUp } from \"./../../store/actions/Authenticate\";\r\nimport { ErrorMessage } from \"../shared/ErrorModal\";\r\n\r\nconst Login = (props) => {\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector((state) => state.auth.loading);\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ email: \"\", password: \"\" }}\r\n      validationSchema={loginValidationSchema}\r\n      onSubmit={(values) => {\r\n        dispatch(signInOrUp(values, \"login\"));\r\n      }}\r\n    >\r\n      {({ handleChange, handleBlur, handleSubmit, values, errors }) => (\r\n        <View style={styles.contaier}>\r\n          <Input\r\n            name=\"email\"\r\n            holder=\"Enter  email\"\r\n            onChangeText={handleChange(\"email\")}\r\n            onBlur={handleBlur(\"email\")}\r\n            value={values.email}\r\n            keyboardType=\"email-address\"\r\n            error={errors.email}\r\n            autoComplete=\"email\"\r\n          />\r\n\r\n          {errors.email && <ErrorMessage error={errors.email} />}\r\n\r\n          <Input\r\n            name=\"password\"\r\n            holder=\"Enter password\"\r\n            onChangeText={handleChange(\"password\")}\r\n            onBlur={handleBlur(\"password\")}\r\n            value={values.password}\r\n            secureTextEntry\r\n            error={errors.password}\r\n          />\r\n          {errors.password && <ErrorMessage error={errors.password} />}\r\n          <Text\r\n            style={styles.forget}\r\n            onPress={() => {\r\n              props.data.navigation.navigate(\"Forgot\");\r\n            }}\r\n          >\r\n            Forgot password\r\n          </Text>\r\n          {loading ? (\r\n            <ActivityIndicator color=\"red\" size=\"large\" />\r\n          ) : (\r\n            <CustomButton\r\n              style={{\r\n                marginVertical: 30,\r\n                marginBottom: 50,\r\n              }}\r\n              touchWidth=\"80%\"\r\n              onPress={handleSubmit}\r\n            >\r\n              Login\r\n            </CustomButton>\r\n          )}\r\n        </View>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n\r\nconst styles = StyleSheet.create({\r\n  contaier: {\r\n    marginTop: 50,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    width: \"100%\",\r\n  },\r\n  forget: {\r\n    width: \"75%\",\r\n    color: Colors.blue,\r\n    textAlign: \"left\",\r\n    fontSize: 18,\r\n    marginBottom: 10,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}