{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect } from \"react\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { useDispatch } from \"react-redux\";\nimport { authenticate } from \"../store/actions/Authenticate\";\nimport { didTryLogin } from \"../store/actions/Authenticate\";\n\nvar LoadingScreen = function LoadingScreen(props) {\n  var dispatch = useDispatch();\n  useEffect(function () {\n    var tryLogin = function tryLogin() {\n      var userData, transformedData, token, userId, email, name;\n      return _regeneratorRuntime.async(function tryLogin$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"userData\"));\n\n            case 2:\n              userData = _context.sent;\n\n              if (userData) {\n                _context.next = 6;\n                break;\n              }\n\n              dispatch(didTryLogin());\n              return _context.abrupt(\"return\");\n\n            case 6:\n              transformedData = JSON.parse(userData);\n              token = transformedData.token, userId = transformedData.userId, email = transformedData.email, name = transformedData.name;\n              dispatch(authenticate(token, userId, email, name));\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    tryLogin();\n  }, []);\n  return React.createElement(View, {\n    style: styles.screen\n  }, React.createElement(ActivityIndicator, {\n    size: \"large\",\n    color: \"red\"\n  }));\n};\n\nexport default LoadingScreen;\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n});","map":{"version":3,"sources":["C:/Users/lenovo/OneDrive/Desktop/MobileQuiz-UI/screens/LoadingScreen.js"],"names":["React","useEffect","AsyncStorage","useDispatch","authenticate","didTryLogin","LoadingScreen","props","dispatch","tryLogin","getItem","userData","transformedData","JSON","parse","token","userId","email","name","styles","screen","StyleSheet","create","flex","justifyContent","alignItems"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;AAEA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,YAAT;AACA,SAASC,WAAT;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAC/B,MAAMC,QAAQ,GAAGL,WAAW,EAA5B;AACAF,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMQ,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACQP,YAAY,CAACQ,OAAb,CAAqB,UAArB,CADR;;AAAA;AACTC,cAAAA,QADS;;AAAA,kBAEVA,QAFU;AAAA;AAAA;AAAA;;AAGbH,cAAAA,QAAQ,CAACH,WAAW,EAAZ,CAAR;AAHa;;AAAA;AAMTO,cAAAA,eANS,GAMSC,IAAI,CAACC,KAAL,CAAWH,QAAX,CANT;AAOPI,cAAAA,KAPO,GAOwBH,eAPxB,CAOPG,KAPO,EAOAC,MAPA,GAOwBJ,eAPxB,CAOAI,MAPA,EAOQC,KAPR,GAOwBL,eAPxB,CAOQK,KAPR,EAOeC,IAPf,GAOwBN,eAPxB,CAOeM,IAPf;AASfV,cAAAA,QAAQ,CAACJ,YAAY,CAACW,KAAD,EAAQC,MAAR,EAAgBC,KAAhB,EAAuBC,IAAvB,CAAb,CAAR;;AATe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AAWAT,IAAAA,QAAQ;AACT,GAbQ,EAaN,EAbM,CAAT;AAcA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEU,MAAM,CAACC;AAApB,KACE,oBAAC,iBAAD;AAAmB,IAAA,IAAI,EAAC,OAAxB;AAAgC,IAAA,KAAK,EAAC;AAAtC,IADF,CADF;AAKD,CArBD;;AAuBA,eAAed,aAAf;AAEA,IAAMa,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,MAAM,EAAE;AACNG,IAAAA,IAAI,EAAE,CADA;AAENC,IAAAA,cAAc,EAAE,QAFV;AAGNC,IAAAA,UAAU,EAAE;AAHN;AADuB,CAAlB,CAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { ActivityIndicator, StyleSheet, Text, View } from \"react-native\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { authenticate } from \"../store/actions/Authenticate\";\r\nimport { didTryLogin } from \"../store/actions/Authenticate\";\r\n\r\nconst LoadingScreen = (props) => {\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    const tryLogin = async () => {\r\n      const userData = await AsyncStorage.getItem(\"userData\");\r\n      if (!userData) {\r\n        dispatch(didTryLogin());\r\n        return;\r\n      }\r\n      const transformedData = JSON.parse(userData);\r\n      const { token, userId, email, name } = transformedData;\r\n\r\n      dispatch(authenticate(token, userId, email, name));\r\n    };\r\n    tryLogin();\r\n  }, []);\r\n  return (\r\n    <View style={styles.screen}>\r\n      <ActivityIndicator size=\"large\" color=\"red\" />\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default LoadingScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n  screen: {\r\n    flex: 1,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}