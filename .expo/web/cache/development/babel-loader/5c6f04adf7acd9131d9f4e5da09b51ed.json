{"ast":null,"code":"import React from \"react\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Heading from \"./../shared/Heading\";\nimport { globalStyles } from \"./../../constants/GlobalStyles\";\nimport Input from \"./../shared/Input\";\nimport CustomButton from \"../shared/Button\";\nimport { Formik } from \"formik\";\nimport { ForgetValidationSchema } from \"../../validationSchema/Login\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { forgetPassword } from \"../../store/actions/Authenticate\";\n\nvar Forget = function Forget(props) {\n  var dispatch = useDispatch();\n  var loading = useSelector(function (state) {\n    return state.auth.loading;\n  });\n  return React.createElement(View, {\n    style: globalStyles.container\n  }, React.createElement(Heading, {\n    style: {\n      marginTop: 0,\n      marginBottom: 0\n    }\n  }, \"We need to verify your identity\"), React.createElement(Image, {\n    style: styles.image,\n    source: require(\"../../assets/images/forget.png\")\n  }), React.createElement(Text, {\n    style: styles.text\n  }, \"How would you like to get your security code ?\"), React.createElement(Formik, {\n    initialValues: {\n      email: \"\"\n    },\n    validationSchema: ForgetValidationSchema,\n    onSubmit: function onSubmit(values) {\n      dispatch(forgetPassword(values, props.navigation));\n    }\n  }, function (_ref) {\n    var handleChange = _ref.handleChange,\n        handleBlur = _ref.handleBlur,\n        values = _ref.values,\n        errors = _ref.errors,\n        handleSubmit = _ref.handleSubmit;\n    return React.createElement(View, {\n      style: {\n        width: \"100%\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      }\n    }, React.createElement(Input, {\n      setWidth: \"90%\",\n      holder: \"Enter recovery email\",\n      name: \"email\",\n      onChangeText: handleChange(\"email\"),\n      onBlur: handleBlur(\"email\"),\n      value: values.email,\n      keyboardType: \"email-address\",\n      error: errors.email,\n      autoComplete: \"email\"\n    }), loading ? React.createElement(ActivityIndicator, {\n      color: \"red\",\n      size: \"large\"\n    }) : React.createElement(CustomButton, {\n      style: {\n        marginTop: 10\n      },\n      touchWidth: \"90%\",\n      onPress: handleSubmit\n    }, \"Submit\"));\n  }));\n};\n\nexport default Forget;\nvar styles = StyleSheet.create({\n  image: {\n    width: 150,\n    height: 150\n  },\n  text: {\n    width: \"80%\",\n    textAlign: \"center\",\n    lineHeight: 25,\n    fontSize: 17,\n    marginBottom: 15\n  }\n});","map":{"version":3,"sources":["C:/Users/lenovo/OneDrive/Desktop/MobileQuiz-UI/components/SignComponents/Forget.js"],"names":["React","Heading","globalStyles","Input","CustomButton","Formik","ForgetValidationSchema","useDispatch","useSelector","forgetPassword","Forget","props","dispatch","loading","state","auth","container","marginTop","marginBottom","styles","image","require","text","email","values","navigation","handleChange","handleBlur","errors","handleSubmit","width","justifyContent","alignItems","StyleSheet","create","height","textAlign","lineHeight","fontSize"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { ActivityIndicator, Image, StyleSheet, Text, View } from \"react-native\";\r\nimport Heading from \"./../shared/Heading\";\r\nimport { globalStyles } from \"./../../constants/GlobalStyles\";\r\nimport Input from \"./../shared/Input\";\r\nimport CustomButton from \"../shared/Button\";\r\nimport { Formik } from \"formik\";\r\nimport { ForgetValidationSchema } from \"../../validationSchema/Login\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { forgetPassword } from \"../../store/actions/Authenticate\";\r\n\r\nconst Forget = (props) => {\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector((state) => state.auth.loading);\r\n\r\n  return (\r\n    <View style={globalStyles.container}>\r\n      <Heading\r\n        style={{\r\n          marginTop: 0,\r\n          marginBottom: 0,\r\n        }}\r\n      >\r\n        We need to verify your identity\r\n      </Heading>\r\n      <Image\r\n        style={styles.image}\r\n        source={require(\"../../assets/images/forget.png\")}\r\n      />\r\n      <Text style={styles.text}>\r\n        How would you like to get your security code ?\r\n      </Text>\r\n      <Formik\r\n        initialValues={{ email: \"\" }}\r\n        validationSchema={ForgetValidationSchema}\r\n        onSubmit={(values) => {\r\n          dispatch(forgetPassword(values, props.navigation));\r\n        }}\r\n      >\r\n        {({ handleChange, handleBlur, values, errors, handleSubmit }) => (\r\n          <View\r\n            style={{\r\n              width: \"100%\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <Input\r\n              setWidth=\"90%\"\r\n              holder=\"Enter recovery email\"\r\n              name=\"email\"\r\n              onChangeText={handleChange(\"email\")}\r\n              onBlur={handleBlur(\"email\")}\r\n              value={values.email}\r\n              keyboardType=\"email-address\"\r\n              error={errors.email}\r\n              autoComplete=\"email\"\r\n            />\r\n            {loading ? (\r\n              <ActivityIndicator color=\"red\" size=\"large\" />\r\n            ) : (\r\n              <CustomButton\r\n                style={{ marginTop: 10 }}\r\n                touchWidth=\"90%\"\r\n                onPress={handleSubmit}\r\n              >\r\n                Submit\r\n              </CustomButton>\r\n            )}\r\n          </View>\r\n        )}\r\n      </Formik>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default Forget;\r\n\r\nconst styles = StyleSheet.create({\r\n  image: {\r\n    width: 150,\r\n    height: 150,\r\n  },\r\n  text: {\r\n    width: \"80%\",\r\n    textAlign: \"center\",\r\n    lineHeight: 25,\r\n    fontSize: 17,\r\n    marginBottom: 15,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}