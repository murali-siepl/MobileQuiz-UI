{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Heading from \"./../shared/Heading\";\nimport { globalStyles } from \"./../../constants/GlobalStyles\";\nimport Input from \"./../shared/Input\";\nimport CustomButton from \"../shared/Button\";\nimport Colors from \"./../../constants/Color\";\nimport { Formik } from \"formik\";\nimport { ResetValidationSchema } from \"./../../validationSchema/Login\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { forgetPassword, resetPassword } from \"./../../store/actions/Authenticate\";\nimport { useRoute } from \"@react-navigation/native\";\n\nvar Reset = function Reset(props) {\n  var dispatch = useDispatch();\n  var loading = useSelector(function (state) {\n    return state.auth.loading;\n  });\n  var route = useRoute();\n  console.log(route.params);\n  return React.createElement(View, {\n    style: globalStyles.container\n  }, React.createElement(Heading, {\n    style: {\n      marginTop: 0,\n      marginBottom: 50\n    }\n  }, \"Reset your account password\"), React.createElement(View, {\n    style: styles.textContainer\n  }, React.createElement(Text, {\n    style: styles.text\n  }, \"Please provide this security code which sent to your registered email id\"), React.createElement(Text, {\n    style: styles.text\n  }, \"didn't receive the security code ?\"), React.createElement(TouchableOpacity, {\n    activeOpacity: 0.5,\n    style: {\n      width: 100,\n      paddingVertical: 5\n    },\n    onPress: function onPress() {\n      dispatch(forgetPassword(route.params, props.navigation, \"resend\"));\n    }\n  }, React.createElement(Text, {\n    style: _objectSpread(_objectSpread({}, styles.text), styles.resend)\n  }, \"Resend code\"))), React.createElement(Formik, {\n    initialValues: {\n      token: \"\",\n      password: \"\",\n      confirmPassword: \"\"\n    },\n    validationSchema: ResetValidationSchema,\n    onSubmit: function onSubmit(values) {\n      dispatch(resetPassword(values, props.navigation));\n    }\n  }, function (_ref) {\n    var handleChange = _ref.handleChange,\n        handleBlur = _ref.handleBlur,\n        values = _ref.values,\n        errors = _ref.errors,\n        handleSubmit = _ref.handleSubmit;\n    return React.createElement(View, {\n      style: {\n        width: \"100%\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      }\n    }, React.createElement(Input, {\n      style: styles.input,\n      holder: \"Security code\",\n      name: \"token\",\n      onChangeText: handleChange(\"token\"),\n      onBlur: handleBlur(\"token\"),\n      value: values.token,\n      error: errors.token,\n      keyboardType: \"numeric\"\n    }), React.createElement(Input, {\n      name: \"password\",\n      holder: \"Enter  password\",\n      onChangeText: handleChange(\"password\"),\n      onBlur: handleBlur(\"password\"),\n      value: values.password,\n      error: errors.password,\n      secureTextEntry: true\n    }), React.createElement(Input, {\n      name: \"confirmPassword\",\n      holder: \"Confirm password\",\n      onChangeText: handleChange(\"confirmPassword\"),\n      onBlur: handleBlur(\"confirmPassword\"),\n      value: values.confirmPassword,\n      error: errors.confirmPassword\n    }), loading ? React.createElement(ActivityIndicator, {\n      color: \"red\",\n      size: \"large\"\n    }) : React.createElement(CustomButton, {\n      style: {\n        marginTop: 10\n      },\n      touchWidth: \"80%\",\n      onPress: handleSubmit\n    }, \"Submit\"));\n  }));\n};\n\nexport default Reset;\nvar styles = StyleSheet.create({\n  textContainer: {\n    width: \"80%\",\n    marginBottom: 25\n  },\n  text: {\n    fontSize: 17,\n    marginBottom: 5,\n    lineHeight: 22\n  },\n  resend: {\n    color: Colors.blue\n  },\n  input: {\n    fontSize: 16,\n    paddingHorizontal: 12\n  }\n});","map":{"version":3,"sources":["C:/Users/lenovo/OneDrive/Desktop/MobileQuiz-UI/components/SignComponents/Reset.js"],"names":["React","Heading","globalStyles","Input","CustomButton","Colors","Formik","ResetValidationSchema","useDispatch","useSelector","forgetPassword","resetPassword","useRoute","Reset","props","dispatch","loading","state","auth","route","console","log","params","container","marginTop","marginBottom","styles","textContainer","text","width","paddingVertical","navigation","resend","token","password","confirmPassword","values","handleChange","handleBlur","errors","handleSubmit","justifyContent","alignItems","input","StyleSheet","create","fontSize","lineHeight","color","blue","paddingHorizontal"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport {\r\n  ActivityIndicator,\r\n  StyleSheet,\r\n  Text,\r\n  TouchableOpacity,\r\n  View,\r\n} from \"react-native\";\r\nimport Heading from \"./../shared/Heading\";\r\nimport { globalStyles } from \"./../../constants/GlobalStyles\";\r\nimport Input from \"./../shared/Input\";\r\nimport CustomButton from \"../shared/Button\";\r\nimport Colors from \"./../../constants/Color\";\r\nimport { Formik } from \"formik\";\r\nimport { ResetValidationSchema } from \"./../../validationSchema/Login\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  forgetPassword,\r\n  resetPassword,\r\n} from \"./../../store/actions/Authenticate\";\r\nimport { useRoute } from \"@react-navigation/native\";\r\n\r\nconst Reset = (props) => {\r\n  const dispatch = useDispatch();\r\n  const loading = useSelector((state) => state.auth.loading);\r\n\r\n  const route = useRoute();\r\n  console.log(route.params);\r\n  return (\r\n    <View style={globalStyles.container}>\r\n      <Heading\r\n        style={{\r\n          marginTop: 0,\r\n          marginBottom: 50,\r\n        }}\r\n      >\r\n        Reset your account password\r\n      </Heading>\r\n      <View style={styles.textContainer}>\r\n        <Text style={styles.text}>\r\n          Please provide this security code which sent to your registered email\r\n          id\r\n        </Text>\r\n        <Text style={styles.text}>didn't receive the security code ?</Text>\r\n        <TouchableOpacity\r\n          activeOpacity={0.5}\r\n          style={{ width: 100, paddingVertical: 5 }}\r\n          onPress={() => {\r\n            dispatch(forgetPassword(route.params, props.navigation, \"resend\"));\r\n          }}\r\n        >\r\n          <Text style={{ ...styles.text, ...styles.resend }}>Resend code</Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n      <Formik\r\n        initialValues={{ token: \"\", password: \"\", confirmPassword: \"\" }}\r\n        validationSchema={ResetValidationSchema}\r\n        onSubmit={(values) => {\r\n          dispatch(resetPassword(values, props.navigation));\r\n        }}\r\n      >\r\n        {({ handleChange, handleBlur, values, errors, handleSubmit }) => (\r\n          <View\r\n            style={{\r\n              width: \"100%\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <Input\r\n              style={styles.input}\r\n              holder=\"Security code\"\r\n              name=\"token\"\r\n              onChangeText={handleChange(\"token\")}\r\n              onBlur={handleBlur(\"token\")}\r\n              value={values.token}\r\n              error={errors.token}\r\n              keyboardType=\"numeric\"\r\n            />\r\n            <Input\r\n              name=\"password\"\r\n              holder=\"Enter  password\"\r\n              onChangeText={handleChange(\"password\")}\r\n              onBlur={handleBlur(\"password\")}\r\n              value={values.password}\r\n              error={errors.password}\r\n              secureTextEntry\r\n            />\r\n\r\n            <Input\r\n              name=\"confirmPassword\"\r\n              holder=\"Confirm password\"\r\n              onChangeText={handleChange(\"confirmPassword\")}\r\n              onBlur={handleBlur(\"confirmPassword\")}\r\n              value={values.confirmPassword}\r\n              error={errors.confirmPassword}\r\n            />\r\n\r\n            {loading ? (\r\n              <ActivityIndicator color=\"red\" size=\"large\" />\r\n            ) : (\r\n              <CustomButton\r\n                style={{ marginTop: 10 }}\r\n                touchWidth=\"80%\"\r\n                onPress={handleSubmit}\r\n              >\r\n                Submit\r\n              </CustomButton>\r\n            )}\r\n          </View>\r\n        )}\r\n      </Formik>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default Reset;\r\n\r\nconst styles = StyleSheet.create({\r\n  textContainer: {\r\n    width: \"80%\",\r\n    marginBottom: 25,\r\n  },\r\n  text: {\r\n    fontSize: 17,\r\n    marginBottom: 5,\r\n    lineHeight: 22,\r\n  },\r\n  resend: {\r\n    color: Colors.blue,\r\n  },\r\n  input: {\r\n    fontSize: 16,\r\n    paddingHorizontal: 12,\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}